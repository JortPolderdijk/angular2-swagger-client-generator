/* tslint:disable */
import { Injectable } from '@angular/core';
import { Http, Response, RequestOptions, URLSearchParams, Headers } from '@angular/http';
import { {{#definitions}}{{name}}{{^last}}, {{/last}}{{/definitions}} } from './models';
import { Observable } from 'rxjs';
import 'rxjs/add/operator/map';


@Injectable()
/**
 * Created with angular2-swagger-client-generator v{{&version}}
 */
export class ApiClientService {
	domain:string;

  constructor(public http: Http){
    {{#domain}}
    this.domain = '{{&.}}';
    {{/domain}}
    {{^domain}}
    this.domain = '';
    {{/domain}}
  }
  /*
	constructor(public http: Http, options?: any) {
		var domain = (typeof options === 'object') ? options.domain : options;
		this.domain = typeof(domain) === 'string' ? domain : '{{&domain}}';

		if(this.domain.length === 0) {
			throw new Error('Domain parameter must be specified as a string.');
		}

		{{#isSecure}}
			this.token = (typeof options === 'object') ? (options.token ? options.token : {}) : {};
		{{/isSecure}}
	}
  */

  /**
  *
	* @method
	* @name returnBody
	*
	*/
  private returnBody(res: Response){
    return res.json();
  }

  private returnResponse(res: Response){
    return res;
  }

  /**
  *
	* @method
	* @name getDefaultHeaders
	*
	*/
  private getDefaultHeaders(): Headers {
    let headers = new Headers();

    // Use this methode to insert some headers that are send with each request.
    // Usefull for setting the `Autorization header` or any other header you want send with each request.
    {{#isSecure}}
    if(this.hasAuthorizationHeader()) {
      headers.set('Authorization',this.authorizationHeaderValue);
    }
    {{/isSecure}}

    headers.set('Content-Type','application/json');
    return headers;
  }

  {{#isSecure}}
  /**
	 * Is the Authorization header set?
	 *
	 * @method
	 * @name hasAuthorizationHeader
	 */
   public hasAuthorizationHeader(): boolean {
 		return (typeof this.authorizationHeaderValue!='undefined' && this.authorizationHeaderValue.length > 0) ? true : false;
 	}

  private authorizationHeaderValue:string;

  {{#securityDefinitions}}
  {{#isBasic}}
  /**
  * Set the user credentials
  * @method
  * @name setCredentials
  *
  */
  public setCredentials(username:string,password:string){
    this.authorizationHeaderValue = 'Basic ' + btoa(username + ':' + password);
  }
  {{/isBasic}}
  {{#isOAuth2}}
  /**
  * Set the oauth2 access token
  * @method
  * @name setToken{{name}}
  *
  */
  public setToken{{name}}(token:string){
    this.authorizationHeaderValue = 'Bearer '+token;
  }
  {{/isOAuth2}}
  {{#isApiKey}}
  apiKey:string;
  /**
  * Set the key to be used for authentication
  * @method
  * @name setApiKey
  *
  */
  public setApiKey(key:string){
    this.apiKey = key;
    // This key is not used by the code.
    // It should be send as '{{apiKeyIn}}' named '{{apiKeyName}}'
    // Someone help with implementing?
  }
  {{/isApiKey}}

  {{/securityDefinitions}}
  {{/isSecure}}

{{#methods}}
	/**
  * {{{summary}}}
	{{#summaryLines}}
  * {{&.}}
  {{/summaryLines}}
  *
	* @method
	* @name {{&methodName}}
	{{#parameters}}
	{{^isSingleton}}* @param {{=<% %>=}}{<%&type%>}<%={{ }}=%> {{&camelCaseName}} - {{&description}}{{/isSingleton}}
	{{/parameters}}
	*/
	public {{&methodName}}({{#parameters}}{{&camelCaseName}}: {{typescriptType}}{{^last}}, {{/last}}{{/parameters}}){{#returns}}: Observable<{{returns}}>{{/returns}} {
		let payload = {};
		let params = new URLSearchParams();
		let headers = this.getDefaultHeaders();

{{#parameters}}
			{{#isQueryParameter}}
			  {{#isSingleton}}
		params.set('{{&name}}','{{&singleton}}');
        {{/isSingleton}}

			  {{^isSingleton}}
			    {{#isPatternType}}
		/* What does this do?
     * Object.keys(parameters).forEach(function(parameterName) {
		 *	if(new RegExp('{{&pattern}}').test(parameterName)){
		 *	params.set('parameterName',parameters[parameterName]);
		 * }
		 * });
     */
          {{/isPatternType}}
			    {{^isPatternType}}
		if({{&camelCaseName}} !== undefined){
			params.set('{{&name}}',{{&camelCaseName}}.toString());
		}
          {{/isPatternType}}
        {{/isSingleton}}
			{{/isQueryParameter}}

			{{#isHeaderParameter}}
			  {{#isSingleton}}
		headers.append('{{&name}}', '{{&singleton}}');
        {{/isSingleton}}
        {{^isSingleton}}
		if({{&camelCaseName}} !== undefined){
			headers.append('{{&name}}', {{&camelCaseName}}.toString());
		}
        {{/isSingleton}}
			{{/isHeaderParameter}}
			{{#isBodyParameter}}
		payload['{{&name}}'] = {{&camelCaseName}};
			{{/isBodyParameter}}
			{{#isFormParameter}}
			  {{#isSingleton}}
        // Form undefined ?
		form['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}
        {{^isSingleton}}
		if({{&camelCaseName}} !== undefined){
      // Form undefined ?
			form['{{&name}}'] = {{&camelCaseName}};
		}
			  {{/isSingleton}}
			{{/isFormParameter}}
{{/parameters}}
		let uri = `{{&backTickPath}}`;
    let requestOptions = new RequestOptions({headers: headers,search:params});
		return this.http
			.{{angular2httpMethod}}(this.domain + uri{{#hasPayload}}, {{#hasBodyParamters}}JSON.stringify({{#parameters}}{{#isBodyParameter}}{{&camelCaseName}}{{/isBodyParameter}}{{/parameters}}){{/hasBodyParamters}}{{^hasBodyParamters}}null{{/hasBodyParamters}}{{/hasPayload}}, requestOptions)
			{{#returns}}.map(this.returnBody);{{/returns}}{{^returns}}.map(this.returnResponse);{{/returns}}
	}

{{/methods}}

}
